/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useDatenbrauereiContext,
  DatenbrauereiContext,
} from "./datenbrauereiContext";
import type * as Fetcher from "./datenbrauereiFetcher";
import { datenbrauereiFetch } from "./datenbrauereiFetcher";
import type * as Schemas from "./datenbrauereiSchemas";

export type GetMerkmalPathParams = {
  /**
   * Merkmalname (die vereinfachte Variante von der Datenbrauerei)
   */
  name: string;
};

export type GetMerkmalError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetMerkmalVariables = {
  pathParams: GetMerkmalPathParams;
} & DatenbrauereiContext["fetcherOptions"];

export const fetchGetMerkmal = (
  variables: GetMerkmalVariables,
  signal?: AbortSignal
) =>
  datenbrauereiFetch<
    Schemas.AbfrageErgebnis,
    GetMerkmalError,
    undefined,
    {},
    {},
    GetMerkmalPathParams
  >({ url: "/merkmal/{name}", method: "get", ...variables, signal });

export const useGetMerkmal = <TData = Schemas.AbfrageErgebnis>(
  variables: GetMerkmalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AbfrageErgebnis, GetMerkmalError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDatenbrauereiContext(options);
  return reactQuery.useQuery<Schemas.AbfrageErgebnis, GetMerkmalError, TData>({
    queryKey: queryKeyFn({
      path: "/merkmal/{name}",
      operationId: "getMerkmal",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetMerkmal({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetAbfrageErgebnisPathParams = {
  /**
   * UUID der Abfrage
   */
  id: string;
};

export type GetAbfrageErgebnisError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetAbfrageErgebnisVariables = {
  pathParams: GetAbfrageErgebnisPathParams;
} & DatenbrauereiContext["fetcherOptions"];

export const fetchGetAbfrageErgebnis = (
  variables: GetAbfrageErgebnisVariables,
  signal?: AbortSignal
) =>
  datenbrauereiFetch<
    Schemas.AbfrageErgebnis,
    GetAbfrageErgebnisError,
    undefined,
    {},
    {},
    GetAbfrageErgebnisPathParams
  >({ url: "/ergebnis/{id}", method: "get", ...variables, signal });

export const useGetAbfrageErgebnis = <TData = Schemas.AbfrageErgebnis>(
  variables: GetAbfrageErgebnisVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AbfrageErgebnis,
      GetAbfrageErgebnisError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDatenbrauereiContext(options);
  return reactQuery.useQuery<
    Schemas.AbfrageErgebnis,
    GetAbfrageErgebnisError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/ergebnis/{id}",
      operationId: "getAbfrageErgebnis",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetAbfrageErgebnis({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetAboSetupPathParams = {
  /**
   * UUID des Abo
   */
  id: string;
};

export type GetAboSetupError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetAboSetupVariables = {
  pathParams: GetAboSetupPathParams;
} & DatenbrauereiContext["fetcherOptions"];

export const fetchGetAboSetup = (
  variables: GetAboSetupVariables,
  signal?: AbortSignal
) =>
  datenbrauereiFetch<
    Schemas.AboSetup,
    GetAboSetupError,
    undefined,
    {},
    {},
    GetAboSetupPathParams
  >({ url: "/abo/{id}", method: "get", ...variables, signal });

export const useGetAboSetup = <TData = Schemas.AboSetup>(
  variables: GetAboSetupVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AboSetup, GetAboSetupError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDatenbrauereiContext(options);
  return reactQuery.useQuery<Schemas.AboSetup, GetAboSetupError, TData>({
    queryKey: queryKeyFn({
      path: "/abo/{id}",
      operationId: "getAboSetup",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetAboSetup({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/merkmal/{name}";
      operationId: "getMerkmal";
      variables: GetMerkmalVariables;
    }
  | {
      path: "/ergebnis/{id}";
      operationId: "getAbfrageErgebnis";
      variables: GetAbfrageErgebnisVariables;
    }
  | {
      path: "/abo/{id}";
      operationId: "getAboSetup";
      variables: GetAboSetupVariables;
    };
